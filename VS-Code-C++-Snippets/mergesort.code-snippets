{
	"mergesort": {
		"prefix": "mergesort",
		"body": [
		  "void merge(vector<int> left, vector<int> rigth, vector<int> &a){",
		  "	int nL = left.size();",
		  "	int nR = rigth.size();",
		  "",
		  "	int ii, jj, kk;",
		  "	ii = jj = kk = 0;",
		  "	while(ii < nL and jj < nR){",
		  "		if(left[ii] <= rigth[jj]){",
		  "			a[kk] = left[ii];",
		  "			ii++;",
		  "		}",
		  "		else if(left[ii] > rigth[jj]){",
		  "			a[kk] = rigth[jj];",
		  "			jj++;",
		  "		}",
		  "		kk++;",
		  "	}",
		  "",
		  "	while(ii < nL){",
		  "		a[kk] = left[ii];",
		  "		ii++;",
		  "		kk++;",
		  "	}",
		  "	while(jj < nR){",
		  "		a[kk] = rigth[jj];",
		  "		jj++;",
		  "		kk++;",
		  "	}",
		  "}",
		  "",
		  "void mergesort(vector<int> &a){",
		  "	int n = a.size();",
		  "	if(n < 2) return;",
		  "	int mid = n/2;",
		  "",
		  "	vector<int> left(mid);",
		  "	vector<int> rigth(n - mid);",
		  "	for(int i = 0; i < mid; i++){",
		  "		left[i] = a[i];",
		  "	}",
		  "	for(int j = mid; j < n; j++){",
		  "		rigth[j - mid] = a[j]; ",
		  "	}",
		  "",
		  "	mergesort(left);",
		  "	mergesort(rigth);",
		  "",
		  "	merge(left, rigth, a);",
		  "}"
		],
		"description": "mergesort"
	  }
}