{
	"mergesort": {
		"prefix": "mergesort",
		"body": [
		  "void merge(vector<int> &a, int l, int mid, int r){",
		  "	int nL = mid - l + 1;",
		  "	int nR = r - mid;",
		  "	vector<int> L(nL),R(nR);",
		  "	for(int i = 0; i < nL; i++){",
		  "		L[i] = a[l+i]; ",
		  "	}",
		  "	for(int j = 0; j < nR; j++){",
		  "		R[j] = a[mid + 1 + j];",
		  "	}",
		  "",
		  "	int ii, jj, kk = l;",
		  "	ii = jj = 0;",
		  "	while(ii < nL and jj < nR){",
		  "		if(L[ii] <= R[jj]){",
		  "			a[kk] = L[ii];",
		  "			ii++;",
		  "		}",
		  "		else if(L[ii] > R[jj]){",
		  "			a[kk] = R[jj];",
		  "			jj++;",
		  "		}",
		  "		kk++;",
		  "	}",
		  "",
		  "	while(ii < nL){",
		  "		a[kk] = L[ii];",
		  "		ii++;",
		  "		kk++;",
		  "	}",
		  "	while(jj < nR){",
		  "		a[kk] = R[jj];",
		  "		jj++;",
		  "		kk++;",
		  "	}",
		  "}",
		  "",
		  "void mergesort(vector<int> &a, int l, int r){",
		  "	if(l < r){",
		  "		int mid = l + (r - l)/2;",
		  "		",
		  "		mergesort(a, l, mid);",
		  "		mergesort(a, mid+1, r);",
		  "",
		  "		merge(a, l, mid, r);",
		  "	}",
		  "}"
		],
		"description": "mergesort"
	  }
}